/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screamerbot;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 *
 * @author SkibbleBip
 * This class is the object responsible for checking the integrety of a file and making sure it's not malicious in any form.
 * On discord there is a bad problem with people embedding metadata in files designed to trigger the AV of a user's computer
 * to be annoying, and this class is designed to check each file and make sure it's safe.
 */
public class AntiMalware {
    
    final private byte[] footer = { (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};
    //java is fucking stupid and doesnt have unsigned bytes
    final private byte[] malHint = {0x6f, 0x62,  0x6a, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x45, 0x6e, 0x76, 0x69, 
                                        0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x28 };
    final private byte[] malTest = {0x58, 0x35, 0x4f, 0x21, 0x50, 0x25, 0x40, 0x41, 0x50, 0x5b, 0x34, 0x5c, 0x50, 0x5a, 0x58, 0x35, 0x34, 0x28, 0x50, 0x5e, 0x29, 0x37,
                                    0x43, 0x43, 0x29, 0x37, 0x7d, 0x24, 0x45, 0x49, 0x43, 0x41, 0x52, 0x2d, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x2d, 0x41,
                                    0x4e, 0x54, 0x49, 0x56, 0x49, 0x52, 0x55, 0x53, 0x2d, 0x54, 0x45, 0x53, 0x54, 0x2d, 0x46, 0x49, 0x4c, 0x45, 0x21, 0x24, 0x48, 0x2b,
                                    0x48, 0x2a};
    
    //private InputStream stream;
    private String ID;
    //private byte[] payload;
    public boolean payloadDetected;
    int possibleMalwareFound = 0;
    
    
    @Deprecated
    public AntiMalware(InputStream in, String ID, String extension) throws IOException{
        
        //this.stream = in;
        this.ID = ID;
        this.payloadDetected = false;
        boolean postHeaderDataFound = false;
        //System.out.println("Scanning...");
        
        byte[] data = in.readAllBytes();
        in.close();
        //System.out.println("size: "+data.length);
        
        if(extension.contains("png")){
        
            int stop = 0;
            int j = 0;
            for(int i = 0; i< data.length; i++){

                    if(data[i] == footer[j]){
                        j++;
                        //i++;
                    }else
                        j = 0;

                
                stop++;
                if(j==12){
                    postHeaderDataFound = true;
                    break;
                }

                //System.out.println(stop++); 
            }

            if(postHeaderDataFound){
                //System.out.println("Data found: " + stop);

                if(stop < data.length){
                    System.out.println("POTENTIAL PAYLOAD FOUND!!! File has "+ (data.length - stop)+" bytes of data after footer.");
                    this.payloadDetected = true;

                    byte[] dump = new byte[data.length - stop];

                    for(int i = 0; i< data.length - stop; i++){
                        dump[i] = data[stop+i];
                        //System.out.print((char)data[stop + i]);   
                    }
                    
                    File toDump = new File("dump"+File.separatorChar+this.ID+".dump");
                    OutputStream os = new FileOutputStream(toDump);
                    os.write(dump);
                    os.flush();
                    os.close();
                    //dump and save the malicious data for later analysis



                }
            }
        
        }//end png
        
    
    }
    
    public AntiMalware(InputStream in/*, String ID*/) throws IOException{
        //this.stream = in;
        //this.ID = ID;
        this.payloadDetected = false;
        
    
        byte[] data = in.readAllBytes();
        in.close();
        
        //int stop = 0;
            int j = 0;
            int v = 0;
            for(int i = 0; i< data.length; i++){

                    if(data[i] == malHint[j]){
                        j++;
                        //i++;
                    }else
                        j = 0;
                    
                    if(data[i] == malTest[v])
                        v++;
                    else
                        v = 0;
                
                //stop++;
                if(j==malHint.length){
                    possibleMalwareFound = 2;
                    break;
                }
                if(v==malTest.length){
                    possibleMalwareFound = 1;
                    break;
                }
        
            }   
            
            
            if(possibleMalwareFound == 2){
                System.out.println("POSSIBLE MALWARE FOUND!!! File has objShell request data.");
                this.payloadDetected = true;
            }
            if(possibleMalwareFound == 1){
                System.out.println("POSSIBLE MALWARE FOUND!!! Non-malicous Test File detected.");
                this.payloadDetected = true;
            }
    
    }
}
